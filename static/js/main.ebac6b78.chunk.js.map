{"version":3,"sources":["Calculator/Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["Calculator","state","operator","firstOperand","secondOperand","displayedResult","isOperatorKeyPressed","isCalculationExecuted","isInit","renderKeyPad","keypad","dataKeyPad","map","item","index","type","value","className","onClick","eval","method","inputNumber","numberKeyValue","newState","inputString","indexOf","parseInt","decimalPartLength","substring","length","parseFloat","toFixed","setState","inputDecimalPoint","decimalPoint","inputOperator","operatorKeyValue","result","operators","x","y","isNaN","executeCalculation","clearAll","clearLatestInput","this","disabled","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ebac6b78.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport dataKeyPad from '../Data/dataKeyPad.json'\r\nimport './Calculator.css'\r\n\r\nexport default class Calculator extends Component {\r\n    state = {\r\n        operator: null,\r\n        firstOperand: 0,\r\n        secondOperand: 0,\r\n        displayedResult: 0,\r\n        isOperatorKeyPressed: false,\r\n        isCalculationExecuted: false,\r\n        isInit: true\r\n    }\r\n\r\n    renderKeyPad = () => {\r\n        let keypad = dataKeyPad.map((item, index) => {\r\n            return (\r\n                <button key={index} type=\"button\" value={item.value} className={item.className}\r\n                    onClick={() => { eval(item.method) }} >\r\n                    {item.value}\r\n                </button>\r\n            )\r\n        });\r\n\r\n        return keypad;\r\n    }\r\n\r\n    inputNumber = (numberKeyValue) => {\r\n        let newState = {};\r\n        if (!this.state.isOperatorKeyPressed) {\r\n            if (this.state.isInit) {\r\n                if (!this.state.isCalculationExecuted) {\r\n                    newState = {\r\n                        firstOperand: numberKeyValue,\r\n                        secondOperand: numberKeyValue,\r\n                        displayedResult: numberKeyValue,\r\n                        isInit: false\r\n                    }\r\n                }\r\n                else {\r\n                    newState = {\r\n                        firstOperand: numberKeyValue,\r\n                        displayedResult: numberKeyValue,\r\n                        isInit: false\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                let inputNumber = 0;\r\n                let inputString = `${this.state.displayedResult}${numberKeyValue}`;\r\n                if (inputString.indexOf(\".\") === -1) {\r\n                    inputNumber = parseInt(inputString);\r\n                }\r\n                else {\r\n                    let decimalPartLength = inputString.substring(inputString.indexOf(\".\") + 1).length;\r\n                    inputNumber = parseFloat(inputString).toFixed(decimalPartLength);\r\n                }\r\n\r\n                if (!this.state.operator || this.state.isCalculationExecuted) {\r\n                    newState = {\r\n                        firstOperand: inputNumber,\r\n                        displayedResult: inputNumber\r\n                    }\r\n                }\r\n                else {\r\n                    newState = {\r\n                        secondOperand: inputNumber,\r\n                        displayedResult: inputNumber\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            newState = {\r\n                secondOperand: numberKeyValue,\r\n                displayedResult: numberKeyValue,\r\n                isOperatorKeyPressed: false,\r\n                isInit: false\r\n            }\r\n        }\r\n        this.setState(newState);\r\n    }\r\n\r\n    inputDecimalPoint = (decimalPoint) => {\r\n        let newState = {};\r\n        if (!this.state.isInit) {\r\n            if (`${this.state.displayedResult}`.indexOf(\".\") === -1) {\r\n                newState = {\r\n                    displayedResult: `${this.state.displayedResult}${decimalPoint}`,\r\n                    isOperatorKeyPressed: false\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            newState = {\r\n                displayedResult: `0${decimalPoint}`,\r\n                isOperatorKeyPressed: false,\r\n                isInit: false\r\n            }\r\n        }\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    inputOperator = (operatorKeyValue) => {\r\n        let newState = {};\r\n        if (!this.state.isOperatorKeyPressed) {\r\n            if (this.state.operator && !this.state.isCalculationExecuted) {\r\n                let result = this.operators[this.state.operator](parseFloat(this.state.firstOperand), parseFloat(this.state.secondOperand));\r\n                newState = {\r\n                    operator: operatorKeyValue,\r\n                    firstOperand: result,\r\n                    secondOperand: result,\r\n                    displayedResult: result,\r\n                    isOperatorKeyPressed: true,\r\n                    isInit: true\r\n                }\r\n            }\r\n            else {\r\n                newState = {\r\n                    secondOperand: this.state.displayedResult,\r\n                    operator: operatorKeyValue,\r\n                    isOperatorKeyPressed: true,\r\n                    isCalculationExecuted: false,\r\n                    isInit: true\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            newState = {\r\n                operator: operatorKeyValue\r\n            }\r\n        }\r\n        this.setState(newState);\r\n    }\r\n\r\n    operators = {\r\n        '+': function (x, y) { if (!isNaN(x) && !isNaN(y)) { return x + y } else { return \"Error\" } },\r\n        '-': function (x, y) { if (!isNaN(x) && !isNaN(y)) { return x - y } else { return \"Error\" } },\r\n        '*': function (x, y) { if (!isNaN(x) && !isNaN(y)) { return x * y } else { return \"Error\" } },\r\n        '/': function (x, y) { if (!isNaN(x) && !isNaN(y) && y !== 0) { return x / y } else { return \"Error\" } },\r\n    }\r\n\r\n    executeCalculation = () => {\r\n        let newState = {};\r\n        if (!this.state.isOperatorKeyPressed) {\r\n            if (this.state.operator) {\r\n                let result = this.operators[this.state.operator](parseFloat(this.state.firstOperand), parseFloat(this.state.secondOperand));\r\n                if (!this.state.isCalculationExecuted) {\r\n                    newState = {\r\n                        isCalculationExecuted: true,\r\n                        firstOperand: result,\r\n                        displayedResult: result,\r\n                        isInit: true\r\n                    }\r\n                }\r\n                else {\r\n                    newState = {\r\n                        firstOperand: result,\r\n                        displayedResult: result,\r\n                        isInit: true\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            let result = this.operators[this.state.operator](parseFloat(this.state.firstOperand), parseFloat(this.state.firstOperand));\r\n            newState = {\r\n                isCalculationExecuted: true,\r\n                isOperatorKeyPressed: false,\r\n                firstOperand: result,\r\n                secondOperand: this.state.firstOperand,\r\n                displayedResult: result,\r\n                isInit: true\r\n            }\r\n        }\r\n        this.setState(newState);\r\n    }\r\n\r\n    clearAll = () => {\r\n        let newState = {\r\n            operator: null,\r\n            firstOperand: 0,\r\n            secondOperand: 0,\r\n            displayedResult: 0,\r\n            isOperatorKeyPressed: false,\r\n            isCalculationExecuted: false,\r\n            isInit: true\r\n        }\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    clearLatestInput = () => {\r\n        let newState = {\r\n            secondOperand: 0,\r\n            displayedResult: 0,\r\n            isOperatorKeyPressed: false,\r\n            isCalculationExecuted: false,\r\n            isInit: true\r\n        }\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"calculator\">\r\n                    <input type=\"text\" className=\"calculator-screen\" value={this.state.displayedResult} disabled />\r\n                    <div className=\"calculator-keypad\">\r\n                        {this.renderKeyPad()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import './App.css';\nimport Calculator from './Calculator/Calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}